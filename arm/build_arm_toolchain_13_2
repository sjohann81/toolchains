#!/bin/sh

# this script was written by Sergio Johann Filho [sergio.johann@acad.pucrs.br]
#
# in order to build the toolchain, we need some basic tools:
# build-essential flex bison libgmp3-dev libmpc-dev libmpfr-dev autoconf
# texinfo libncurses5-dev gawk libtool zlib1g-dev 
#
# You don't need to run this script as root. Before running this script, create the
# /usr/local/arm-none-eabi directory and set the owner of this toolchain to your
# default user or a system admin, if you're the one:
# sudo chown user:user /usr/local/arm-none-eabi
# Then just run this script. After completion, add the tools directory to the PATH
# environment variable (export $PATH:=$PATH:/usr/local/arm-none-eabi/gcc/bin).
# alternatively, the compiler may be left anywhere in the user home directory. Also,
# create a symbolic link in the compiler directory (gcc-13.2.0 -> gcc) to support
# multiple versions of the toolchain.
#

set -o xtrace

binutils_base="binutils-2.41"
gcc_base="gcc-13.2.0"
newlib_base="newlib-4.1.0"
gdb_base="gdb-13.2"

root_dir=`pwd`
usr_local_dir="/usr/local"

TARGET=arm-none-eabi
PREFIX=${usr_local_dir}/$TARGET/${gcc_base}
BUILD=i686-linux-gnu

# setup our toolchain new path
export PATH=$PREFIX/bin:$PATH

dl_dir="${root_dir}/download"
src_dir="${root_dir}/source"
bld_dir="${root_dir}/build"
install_dir="${root_dir}/install"

mkdir ${src_dir}
mkdir ${bld_dir}
mkdir ${install_dir}
mkdir ${dl_dir}

# download all sources
cd $dl_dir
wget -c ftp://ftp.gnu.org/gnu/binutils/${binutils_base}.tar.gz
wget -c ftp://ftp.gnu.org/gnu/gdb/${gdb_base}.tar.gz
wget -c ftp://ftp.gnu.org/gnu/gcc/${gcc_base}/${gcc_base}.tar.gz
wget -c ftp://sourceware.org/pub/newlib/${newlib_base}.tar.gz

# unpack everything
cd ${src_dir}
tar -zxvf ${dl_dir}/"${binutils_base}.tar.gz"
tar -zxvf ${dl_dir}/"${gdb_base}.tar.gz"
tar -zxvf ${dl_dir}/"${gcc_base}.tar.gz"
tar -zxvf ${dl_dir}/"${newlib_base}.tar.gz"

#
# build binutils
#
cd ${bld_dir}
mkdir ${binutils_base}
cd ${binutils_base}
${src_dir}/${binutils_base}/configure --prefix=$PREFIX --target=$TARGET \
	--with-sysroot --disable-nls --disable-werror
make -j2 all
make install

#
# build GDB
#
cd ${bld_dir}
mkdir ${gdb_base}
cd ${gdb_base}
${src_dir}/${gdb_base}/configure --prefix=$PREFIX --target=$TARGET \
	--enable-interwork --enable-multilib
make -j2 all
make install

#
# build GCC
#
cd ${src_dir}/${gcc_base}
./contrib/download_prerequisites

cd ${bld_dir}
mkdir ${gcc_base}
cd ${gcc_base}
${src_dir}/${gcc_base}/configure --prefix=$PREFIX --target=$TARGET \
	--disable-nls --enable-languages=c --enable-interwork --enable-multilib \
	--with-system-zlib --with-newlib --disable-shared --without-headers
make -j2 all-gcc
make install-gcc

#
# build newlib
#
cd ${bld_dir}
mkdir ${newlib_base}
cd ${newlib_base}
${src_dir}/${newlib_base}/configure --prefix=$PREFIX --target=$TARGET \
	--disable-nls --enable-interwork --enable-multilib --disable-newlib-supplied-syscalls
make -j2 all
make install

#
# build final GCC
#
cd ${bld_dir}
cd ${gcc_base}
${src_dir}/${gcc_base}/configure --prefix=$PREFIX --target=$TARGET \
	--disable-nls --enable-languages=c,c++ --enable-interwork --enable-multilib \
	--with-system-zlib --with-newlib --disable-shared
make -j2 all
make install
